package com.ww.http;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.os.Handler;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;

import com.luzhoudache.R;
import com.ww.util.Debug;
import com.ww.util.NetworkUtil;
import com.ww.util.ScreenUtil;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.Iterator;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * @author Administrator
 */
public class SocketClient {
    private static Activity mActivity;
    private static SocketClient instance;
    private ISocketResponse iSocketResponse;
    private Handler handler;
    private static Context mContext;
    private ProgressDialog dialog;
    private final int STATE_OPEN = 1;// socket打开
    private final int STATE_CLOSE = 1 << 1;// socket关闭
    private final int STATE_CONNECT_START = 1 << 2;// 开始连接server
    private final int STATE_CONNECT_SUCCESS = 1 << 3;// 连接成功
    private final int STATE_CONNECT_FAILED = 1 << 4;// 连接失败
    private final int STATE_CONNECT_WAIT = 1 << 5;// 等待连接
    private String IP;
    private int PORT;

    //以下为正式
//    private String IP = "xxx.xxx.com";
//    private int PORT = 8080;

    //以下为测试xxx.dev.xxx.com:6060 socket长连接
//    private String IP = "xxx.dev.xxx.com";
//    private int PORT = 8080;

    private int state = STATE_CONNECT_START;

    private Socket socket = null;
    private OutputStream outStream = null;
    private InputStream inStream = null;

    private Thread conn = null;
    private Thread send = null;
    private Thread rec = null;

    private Context context;
    private LinkedBlockingQueue<String> requestQueen = new LinkedBlockingQueue<String>();
    private final Object lock = new Object();
    private final String TAG = "Client";

    public static SocketClient getInstance(Context context) {
        if (instance == null) {
            mContext = context;
            instance = new SocketClient(context);
        }
        return instance;
    }

    public void removeISocketResponseListener() {
        iSocketResponse = null;
    }

    public void setISocketResponseListener(ISocketResponse response) {
        iSocketResponse = response;
    }

    public void sethandlder(Handler handler) {
        this.handler = handler;
    }

    public int send(String in, Activity activity, boolean isShowDialog) {
        if (TextUtils.isEmpty(in)) {
            return 0;
        }
        mActivity = activity;
        Log.e("ww_socket_statu", STATE_CONNECT_START + "");
        Log.e("ww_socket_send", in);
        if (mActivity != null && isShowDialog) {
            showDialog();
        }
        requestQueen.add(in);
        synchronized (lock) {
            lock.notifyAll();
        } return 1;
    }

    public void cancel(String req) {
        if (TextUtils.isEmpty(req)) {
            return;
        }
        Iterator<String> mIterator = requestQueen.iterator();
        while (mIterator.hasNext()) {
            String packet = mIterator.next();
            if (!TextUtils.isEmpty(packet) && packet.endsWith(req)) {
                mIterator.remove();
            }
        }
    }

    public SocketClient(Context context) {
        this.context = context;
    }

    public boolean isNeedConn() {
        return !((state == STATE_CONNECT_SUCCESS)
                && (null != send && send.isAlive()) && (null != rec && rec
                .isAlive()));
    }

    public void open() {
        reconn();
    }

    public void open(String host, int port) {
        this.IP = host;
        this.PORT = port;
        reconn();
    }

    private long lastConnTime = 0;

    public synchronized void reconn() {
        if (System.currentTimeMillis() - lastConnTime < 2000) {
            return;
        }
        lastConnTime = System.currentTimeMillis();

        close();
        state = STATE_OPEN;
        conn = new Thread(new Conn());
        conn.start();
    }

    public synchronized void close() {
        try {
            if (state != STATE_CLOSE) {
                try {
                    if (null != socket) {
                        socket.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    socket = null;
                }

                try {
                    if (null != outStream) {
                        outStream.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    outStream = null;
                }

                try {
                    if (null != inStream) {
                        inStream.close();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    inStream = null;
                }

                try {
                    if (null != conn && conn.isAlive()) {
                        conn.interrupt();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    conn = null;
                }

                try {
                    if (null != send && send.isAlive()) {
                        send.interrupt();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    send = null;
                }

                try {
                    if (null != rec && rec.isAlive()) {
                        rec.interrupt();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    rec = null;
                }

                state = STATE_CLOSE;
            }
            requestQueen.clear();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private class Conn implements Runnable {
        public void run() {
            Log.v(TAG, "Conn :Start");
            try {
                while (state != STATE_CLOSE) {
                    try {
                        state = STATE_CONNECT_START;
                        socket = new Socket();
                        socket.connect(new InetSocketAddress(BaseApi.IP, BaseApi.PORT),
                                15 * 1000);
                        state = STATE_CONNECT_SUCCESS;
                        Debug.logError("-------------------aaa");
                    } catch (Exception e) {
                        e.printStackTrace();
                        state = STATE_CONNECT_FAILED;
                        Debug.logError("-------------------ccc");
                    }

                    if (state == STATE_CONNECT_SUCCESS) {
                        Debug.logError("-------------------bbb");
                        try {
                            outStream = socket.getOutputStream();
                            inStream = socket.getInputStream();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        send = new Thread(new Send());

                        rec = new Thread(new Rec());
                        send.start();
                        rec.start();
                        break;
                    } else {
                        state = STATE_CONNECT_WAIT;
                        // 如果有网络没有连接上，则定时取连接，没有网络则直接退出
                        Debug.logError("-------------------ddd");
                        if (NetworkUtil.isConnected(context)) {
                            try {
                                Thread.sleep(15 * 1000);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            Log.v(TAG, "Conn :End");
        }
    }

    private class Send implements Runnable {
        public void run() {
            Log.v(TAG, "Send :Start");
            try {
                while (state != STATE_CLOSE && state == STATE_CONNECT_SUCCESS
                        && null != outStream) {
                    String item;
                    while (null != (item = requestQueen.poll())) {
                        outStream.write((item + "\r\n\r\n").getBytes());
                        outStream.flush();
                        item = null;
                    }
                    Log.v(TAG, "Send :woken up AAAAAAAAA");
                    synchronized (lock) {
                        try {
                            lock.wait();
                        } catch (Exception e) {
                        }
                    }
                    Log.v(TAG, "Send :woken up BBBBBBBBBB");
                }
            } catch (SocketException e1) {
                e1.printStackTrace();// 发送的时候出现异常，说明socket被关闭了(服务器关闭)java.net.SocketException:
                // sendto failed: EPIPE (Broken pipe)
                reconn();
            } catch (Exception e) {
                Log.v(TAG, "Send ::Exception");
                e.printStackTrace();
            }

            Log.v(TAG, "Send ::End");
        }
    }

    private class Rec extends Thread {
        BufferedReader in;

        public void run() {
            try {
                in = new BufferedReader(
                        new InputStreamReader(inStream, "UTF-8"));
            } catch (IOException e) {
                e.printStackTrace();
            }
            while (true) {
                if (state != STATE_CLOSE && state == STATE_CONNECT_SUCCESS
                        && null != inStream) {
                    try {
                        final String result = in.readLine();
                        if (!TextUtils.isEmpty(result)) {
                            if (handler != null) {
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        if (iSocketResponse != null) {
                                            iSocketResponse
                                                    .onSocketResponse(result);
                                            closeDialog();
                                        }
                                    }
                                });
                            } else {
                                if (iSocketResponse != null) {
                                    iSocketResponse.onSocketResponse(result);
                                }
                            }
                        }
                        sleep(500);
                    } catch (IOException e) {
                        e.printStackTrace();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                } else {
                    break;
                }
            }
        }
    }


    ///////////////////////////////////////////////
    private void showDialog() {
        if (dialog != null && dialog.isShowing()) {
            return;
        }
        if (null != mActivity && !mActivity.isFinishing()) {
            View dialogView = LayoutInflater.from(mContext).inflate(R.layout.view_loading, null);
            ScreenUtil.initScale(dialogView);
            dialog = new ProgressDialog(mActivity, R.style.LodingDialog);

            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);
            dialog.show();
            dialog.setContentView(dialogView);
        }

        if (handler != null) {
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    closeDialog();
                }
            }, 1000 * 5);
        }

    }

    private void closeDialog() {
        if (dialog != null && dialog.isShowing()) {
            try {
                dialog.dismiss();
                dialog = null;
            } catch (Throwable e) {
            }

        }
    }
    ///////////////////////////////////////////////

}
